<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>identifier = 0;

hp = 20;
maxHp = 10;
state = s.IDLE;
dir = d.RIGHT;
xo = x;
yo = y;
xoo = x;
yoo = y;

xVel = 0;
yVel = 0;
v = .1;

angle = 0;
t_angle = 0;

stateTimer = 60;
followTimer = 0;
shootTimer = 0;

for (var i = 0; i &lt; maxHp; i++) {
    seg[i] = instance_create(x, y, objBoss2Seg);
    if (i == 0)
        seg[i].parent = id;
    else
        seg[i].parent = seg[i - 1];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// special instance management
instance_activate_region(bbox_left - 2*view_wview, view_yview - 2*view_hview, 4*view_wview, 4*view_hview, 1);
with(objEnemyProjectile) killOutsideView = false;

stateTimer = max(stateTimer - 1, 0);
followTimer = max(followTimer - 1, 0);
shootTimer = max(shootTimer - 1, 0);

// velocity
v = .5 + .5 * (followTimer &gt; 0);

xo = ((x + 8) div T) * T;
yo = ((y + 8) div T) * T;

// angle management
if (abs(xVel) &gt; 0 || abs(yVel) &gt; 0)
    t_angle = 360 + point_direction(x, y, x + xVel, y + yVel) + 90;
if (abs(angle - t_angle) &gt;= 180) {
    angle -= sign(angle - t_angle) * 360;
}
angle = 360 + (angle + (t_angle - angle) / 4) % 360;

// death management
hp = 0;
for (var i = 0; i &lt; array_length_1d(seg); i++) {
    hp += seg[i].hp;
}

if (hp == 0) {
    if (state != s.DEAD) {
        stateTimer = 90;
        state = s.DEAD;        
        var i = 0;
        repeat(4) {
            var flash = instance_create(x, y, objFlash);
            flash.delay = i * 30;
            i++;
            if (i == 3) {
                flash.delay += 30;
                flash.alpha = 2;
                flash.aVel = .01;
            }
        }
    }
}

if (state == s.DEAD) {
    with(objEnemyProjectile) instance_destroy();
    
    if(stateTimer % 15 == 0) {
        var i = irandom(array_length_1d(seg) - 1);    
        instance_create(seg[i].x + 8, seg[i].y + 8, objEffect);
    }
    
    xVel = 0;
    yVel = 0;
    if (stateTimer &lt; 30)
        global.keysEnabled = false;
        
    if(stateTimer % 10 == 0) {
        var eff = instance_create(x + random(T), y + random(T), objEffect);
    }

    if(!stateTimer) {
        c_out("Defeated boss with id", identifier);
        ds_list_add(global.ds_bosses, identifier);
        global.keysEnabled = true;
        
        with(objBoss2Seg) instance_destroy();
        instance_destroy();
    }
}

// shooting
if(state == s.WALK &amp;&amp; hp &lt; 4) {
    if (!shootTimer) {
        var proj = instance_create(x + 8, y + 8, objEnemyProjectile);
        proj.type = 1;
        
        shootTimer = 180;//120 + 3 * (hp/maxHp) * 60;
    }
}

if (state == s.HURT) {
    xVel = 0;
    yVel = 0;
    x += (xo - x) / 20;
    y += (yo - y) / 20;
    if (!stateTimer) {
        followTimer = 4*60;
        state = s.IDLE;
    }
}

if (state == s.IDLE) {
    xVel = 0;
    yVel = 0;
    x = xo;
    y = yo;
    xoo = xo;
    yoo = yo; 
    if (!stateTimer) {    
        if (followTimer) {
            
            dx = abs(x + 8 - objPlayer.x);
            dy = abs(y + 8 - objPlayer.y);
            
            if (dx &lt; .5 * dy) {
                if (y + 8 &lt; objPlayer.y) dir = d.DOWN; else dir = d.UP;
            } else {
                if (x + 8 &gt; objPlayer.x) dir = d.LEFT; else dir = d.RIGHT;
            }
            
        } else {
        
            dir = choose(
            dir, dir, dir, 
            dir, dir, dir, 
            dir, dir, dir,
            d.LEFT, d.RIGHT, d.UP, d.DOWN);
        }
        
        state = s.WALK;
    }
}

if (state == s.WALK) {
    if (dir == d.UP) { xVel = 0; yVel = -v }
    if (dir == d.DOWN) { xVel = 0; yVel = v }
    if (dir == d.LEFT) { xVel = -v; yVel = 0 }
    if (dir == d.RIGHT) { xVel = v; yVel = 0 }
    
    if ((abs(x - xoo) &gt;= T) || (abs(y - yoo) &gt;= T)) {
        state = s.IDLE;
    }
}

xcol = false;
ycol = false;
for(var i = 0; i &lt; instance_number(objSolid); i++) {
    var o = instance_find(objSolid, i);
    
    if (o.object_index != objBoss2Seg) {
        if (place_meeting(x + sign(xVel), y, o))
            xcol = true;
        if (place_meeting(x, y + sign(yVel), o))
            ycol = true;            
    }
}

if (!xcol) {
    x += xVel;
} else {
    xVel = 0;
    state = s.IDLE;
}

if (!ycol) {
    y += yVel;    
} else {
    yVel = 0;
    state = s.IDLE;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprBoss2, 3 + (followTimer &gt; 0), x + 8, y + 8, 1, 1, angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
