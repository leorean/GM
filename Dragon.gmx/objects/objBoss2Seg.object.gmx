<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTile</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objObstacle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>parent = noone;
xVel = 0;
yVel = 0;
dir = 0;
xo = x;
yo = y;
v = 0;
state = s.IDLE;

hp = 1;
angle = 0;
t_angle = 0;
dir = d.LEFT;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>v = parent.v;
xo = (x + 8) div T * T;
yo = (y + 8) div T * T;
state = parent.state;

/*if (!collision_point(x, y, parent, 0, 1))
    dd = 10;
else
    dd = 20;*/

dd = 32;
    
xVel = (parent.xo - x) / dd;
yVel = (parent.yo - y) / dd;

x += xVel;
y += yVel;
t_angle = point_direction(x, y, x + abs(xVel), y + abs(yVel));// + 90;

/*if (abs(x - parent.x) &gt; .1)
    dir = sign(x - parent.x);

if (abs(x - parent.x) &gt; 2 || abs(y - parent.y) &gt; 2) {
    t_angle = point_direction(x, y, parent.x, parent.y + 4) % 180
    - 180 * (dir == d.LEFT);
}*/

angle += (t_angle - angle) / 20;

if (hp &amp;&amp; objBoss2.state != s.HURT) {
    var proj = instance_place(x, y, objTossBubble);
    if (proj &amp;&amp; !proj.destroy) {
        hp = max(hp - 1, 0);
        shake();
        objBoss2.state = s.HURT;
        objBoss2.stateTimer = 60;
        proj.destroy = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _x = (x + parent.x) / 2;
var _y = (y + parent.y) / 2;
var _a = (angle + parent.angle) / 2;

draw_sprite_ext(sprBoss2Seg, 0, x + 8, y + 8, 1, 1, angle, c_white, 1);
draw_sprite_ext(sprBoss2Seg, 1, _x + 8, _y + 8, 1, 1, _a, c_white, 1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
