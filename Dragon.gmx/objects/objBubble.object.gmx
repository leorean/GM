<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskBubble</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = d.RIGHT;
state = s.SHOOT;
xVel = 0;
yVel = 0;
spd = 2.5;
decay = 1;

d_scale = .5;
d_t = 0;
d_sin = 0;
xo = x;
yo = y;

lightning = 0;

superTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d_scale = min(d_scale + .02, 1);

if (place_meeting(x, y, objPlayer)) {
    move_outside_solid(point_direction(x, y, objPlayer.x, objPlayer.y), 8);
    if (abs(x - objPlayer.x) &gt; 2) {
        var pd = .5 * sign(x - objPlayer.x);
        x += pd;
    }
    if (abs(y - objPlayer.y) &gt; 2) {
        var pd = .5 * sign(y - objPlayer.y);
        y += pd;
    }
}

var otherBubble = instance_place(x, y, objBubble);
if (otherBubble) {
    if (abs(x - otherBubble.x) &gt; 2) {
        var pd = .5 * sign(x - otherBubble.x);
        x += pd;
    }
    if (abs(y - otherBubble.y) &gt; 2) {
        var pd = .5 * sign(y - otherBubble.y);
        y += pd;
    }
}

if (collision_point(x, y, objUpWind, 0, 1)) {

    if (!place_meeting(x, y - 1, objSolid)) {
        y -= .3;
        yo -= .3;
    }
/*    superTimer = max(superTimer - 1, 0);
    xVel *= .9;
    yVel *= .9;
    if (superTimer == 0) {
        var sb = instance_create(x, y, objSuperBubble);
        sb.dir = dir;
        instance_destroy();
    }
} else {
    superTimer = 30;
    */
}

if (collision_circle(x, y, 2, objSolid, 0, 1)) {
    state = s.POP;
}

if (place_meeting(x, y, objNoBubble)) {
    state = s.POP;
}
    
if (state == s.SHOOT) {
    var xSpd = spd * decay;
    xVel = sign(dir) * xSpd;
    decay = max(decay - .05, 0);

    if (place_meeting(x, y - 1, objSolid)
    &amp;&amp; !place_meeting(x, y + 1, objSolid)) {
        y ++;
    }
    
    if (place_meeting(x + xVel, y, objSolid)
        || xSpd == 0) {
            x -= xVel;
            xVel = 0;
        state = s.IDLE;
    }    
}

if (hasAbility(a.SUN)) {
    var killMe = false;
    for(var i = 0; i &lt; instance_number(objEnemyProjectile); i++) {
        var proj = instance_find(objEnemyProjectile, i);
        if (proj.state == s.SHOOT &amp;&amp; place_meeting(x, y, proj)) {
            proj.state = s.DEAD;
            killMe = true;
        }
    }
    if (killMe) state = s.POP;
}

if (state == s.IDLE) {
    d_t = (d_t + .03) % (2*pi);
    d_sin = sin(d_t);
    
    var d_sin2 = sin(d_t + .5 * pi);
    var x_mov = sign(dir) * .15 * d_sin; 
    if (!place_meeting(x + x_mov, y, objSolid))
        x += x_mov;
    y -= .1 * abs(d_sin2);
    
    if (place_meeting(x, y - 1, objSolid)) {
        y = yprevious;
    }
}

if (abs(y - yo) &gt; 2*T) state = s.POP;

if (state == s.POP) {

    if (hasAbility(a.SKY)) {
        var upWind = instance_create(x - 8, y - 8, objUpWind);
        upWind.timeOut = 10 * 60;
    }
    instance_create(x, y, objBubblePop);
    instance_destroy();
}

if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    xVel = 0;
}

if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    yVel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (lightning != 0) {
    if (is_array(lightning)) {
        for (var i = 0; i &lt; array_length_1d(lightning); i++) {
            var l = lightning[i];
            if (is_array(l)) {
                drawLightning(l[0], l[1], l[2], l[3]);
            }
        }
    }
}

/*if (hasAbility(a.SUN)) {
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(sprLight, -1, x, y, .6, .6, 0, c_white, .03);
    draw_sprite_ext(sprLight, -1, x, y, .7, .7, 0, c_white, .03);
    draw_set_blend_mode(bm_normal);
}*/

draw_sprite_ext(mskBubble, 0, x, y, d_scale, d_scale, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
