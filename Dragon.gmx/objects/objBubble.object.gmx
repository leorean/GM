<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskBubble</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = d.RIGHT;
state = s.SHOOT;
xVel = 0;
yVel = 0;
spd = 2.5;
decay = 1;

d_scale = .5;
d_t = 0;
d_sin = 0;
xo = x;
yo = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d_scale = min(d_scale + .02, 1);

if(!in(x, view_xview, view_xview + view_wview)
    || !in(y, view_yview, view_yview + view_hview + 3*T))
    instance_destroy();

if (state == s.SHOOT) {
    var xSpd = spd * decay;
    xVel = sign(dir) * xSpd;
    decay = max(decay - .05, 0);

    if (place_meeting(x, y - 1, objSolid)
    &amp;&amp; !place_meeting(x, y + 1, objSolid)) {
        y ++;
    }
    
    if (place_meeting(x + xVel, y, objSolid)
        || xSpd == 0) {
            x -= xVel;
            xVel = 0;
        state = s.IDLE;
    }    
}

if (state == s.IDLE) {
    d_t = (d_t + .03) % (2*pi);
    d_sin = sin(d_t);
    
    var d_sin2 = sin(d_t + .5 * pi);
    var x_mov = sign(dir) * .15 * d_sin; 
    if (!place_meeting(x + x_mov, y, objSolid))
        x += x_mov;
    y -= .1 * abs(d_sin2);
    
    if (place_meeting(x, y - 1, objSolid)) {
        state = s.POP;
    }
}

if (abs(y - yo) &gt; 2*T) state = s.POP;

if (state == s.POP) {
    instance_create(x, y, objBubblePop);
    instance_destroy();
} else {
    /*
    var _z = 2.5;
    var _v = .25;
    var _acc = 400;
    var _maxDist = 8;
    if (hasAbility(a.EARTH) &amp;&amp; random(90) &lt; 3) {
        var eff = instance_create(x - 8 + random(T), y - 8 + random(T), objRuneEffect);
        eff.type = log2(a.EARTH);
        eff.target = id;
        eff.z = _z;
        eff.xVel = lengthdir_x(_v, point_direction(x, y, eff.x, eff.y));
        eff.yVel = lengthdir_y(_v, point_direction(x, y, eff.x, eff.y));
        eff.acc = _acc;
        eff.maxDist = _maxDist;
    }
    if (hasAbility(a.THUNDER) &amp;&amp; random(90) &lt; 3) {
        var eff = instance_create(x - 8 + random(T), y - 8 + random(T), objRuneEffect);
        eff.type = log2(a.THUNDER);
        eff.target = id;
        eff.z = _z;
        eff.xVel = lengthdir_x(_v, point_direction(x, y, eff.x, eff.y));
        eff.yVel = lengthdir_y(_v, point_direction(x, y, eff.x, eff.y));
        eff.acc = _acc;
        eff.maxDist = _maxDist;
    }
    if (hasAbility(a.SUN) &amp;&amp; random(90) &lt; 3) {
        var eff = instance_create(x - 8 + random(T), y - 8 + random(T), objRuneEffect);
        eff.type = log2(a.SUN);
        eff.target = id;
        eff.z = _z;
        eff.xVel = lengthdir_x(_v, point_direction(x, y, eff.x, eff.y));
        eff.yVel = lengthdir_y(_v, point_direction(x, y, eff.x, eff.y));
        eff.acc = _acc;
        eff.maxDist = _maxDist;
    }
    if (hasAbility(a.SKY) &amp;&amp; random(90) &lt; 3) {
        var eff = instance_create(x - 8 + random(T), y - 8 + random(T), objRuneEffect);
        eff.type = log2(a.SKY);
        eff.target = id;
        eff.z = _z;
        eff.xVel = lengthdir_x(_v, point_direction(x, y, eff.x, eff.y));
        eff.yVel = lengthdir_y(_v, point_direction(x, y, eff.x, eff.y));
        eff.acc = _acc;
        eff.maxDist = _maxDist;
    }*/
    /*
    if (hasAbility(a.THUNDER) &amp;&amp; random(6) &lt; 3) {
        var _ang = point_direction(x, y, objPlayer.x, objPlayer.y);
        var _dst = point_distance(x, y, objPlayer.x, objPlayer.y);
        var eff = instance_create(x + lengthdir_x(random(_dst), _ang), y + lengthdir_y(random(_dst), _ang), objRuneEffect);
        eff.type = log2(a.THUNDER);
        eff.z = 1;
        /*eff.xVel = lengthdir_x(3, point_direction(x, y, objPlayer.x, objPlayer.y));
        eff.yVel = lengthdir_y(3, point_direction(x, y, objPlayer.x, objPlayer.y));*
        eff.xVel = 0;
        eff.yVel = 0;
    }   
    if (hasAbility(a.SUN) &amp;&amp; random(60) &lt; 3) {
        var _x = x - 8 + random(T);
        var _y = y - 8 + random(T);
        for(var i = 0; i &lt; 3; i++) {
            var eff = instance_create(_x, _y, objRuneEffect);  
            eff.type = log2(a.SUN);        
            eff.xVel = lengthdir_x((i / 2 + .5), point_direction(x, y, eff.x, eff.y));
            eff.yVel = lengthdir_y((i / 2 + .5), point_direction(x, y, eff.x, eff.y));
            z = 3 - i;
        }
    }
    if (hasAbility(a.SKY) &amp;&amp; random(20) &lt; 3) {
        var eff = instance_create(x - 8 + random(T), y - 8 + random(T), objRuneEffect);
        eff.type = log2(a.SKY);
        //eff.xVel = lengthdir_x(.1, point_direction(x, y, eff.x, eff.y));
        //eff.yVel = lengthdir_y(.1, point_direction(x, y, eff.x, eff.y));
        eff.yVel = -1.5;
    }*/
}

if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    xVel = 0;
}

if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    yVel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hasAbility(a.EARTH)) {
    draw_set_blend_mode(bm_normal);
    draw_sprite_ext(mskBubble, 1, x, y, d_scale, d_scale, 0, c_white, .6);
}
if (hasAbility(a.THUNDER)) {
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(mskBubble, 2, x, y, d_scale, d_scale, 0, c_white, .25);
}
if (hasAbility(a.SUN)) {
    draw_set_blend_mode(bm_add);
    //draw_sprite_ext(mskBubble, 3, x, y, d_scale, d_scale, 0, c_white, .15);    
    draw_sprite_ext(sprLight, -1, x, y, d_scale, d_scale, 0, c_white, .06);
}
if (hasAbility(a.SKY)) {
    draw_set_blend_mode(bm_subtract);
    draw_sprite_ext(mskBubble, 3, x, y, d_scale, d_scale, 0, c_white, .1);
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(mskBubble, 4, x, y, d_scale, d_scale, 0, c_white, .3);
}
draw_set_blend_mode(bm_normal);

draw_sprite_ext(mskBubble, 0, x, y, d_scale, d_scale, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
