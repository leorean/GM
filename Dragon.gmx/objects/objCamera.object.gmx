<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bg = -1;
weather = w.NONE;

changedRoom = false;
moving = false;

lastBg = 0;
bgTimer = 0;
maxBgTimer = 0;

upJump = 0; // so player gets a boost upwards once

w_color = c_white;
w_alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tx = view_wview * .5 + ((objCameraTarget.x div view_wview) * view_wview);
ty = view_hview * .5 + ((objCameraTarget.y div view_hview) * view_hview);

tx0 = (objCameraTarget.x div view_wview) * view_wview;
ty0 = (objCameraTarget.y div view_hview) * view_hview;

var ambience = instance_place(tx0, ty0, objAmbience);
    //tx0, ty0, objAmbience, 0, 1);
if (ambience) {
    if (global.bg != ambience.bg) {
        bgTimer = 30;
        lastBg = global.bg;
    }
    
    global.bg = ambience.bg;
    global.weather = ambience.weather;
}

maxBgTimer = max(bgTimer, maxBgTimer);
x += (tx - x) / 6;
y += (ty - y) / 6;

if (ty &lt; y - 8 &amp;&amp; !upJump) {
    upJump = true;
    if (instance_exists(objPlayer)) {   
        if (yprevious &gt; y &amp;&amp; objPlayer.yVel &lt; 0) {
            objPlayer.yVel = -2.8;
        }
    }
}

// flags
moving = abs(x - xprevious) &gt; .2 || abs(y - yprevious) &gt; .2;
changedRoom = ((abs(x - xprevious) &lt; .1 &amp;&amp; x != xprevious) 
    || (abs(y - yprevious) &lt; .1 &amp;&amp; y != yprevious));

// room change
if (changedRoom) {

    upJump = false;
    x = tx;
    y = ty;

    // kill old enemies
    /*instance_activate_object(objEnemy);
    with(objEnemy) instance_destroy();
    
    // create new enemies
    for (var i = 0; i &lt; instance_number(objEnemySpawn) i++) {
        var esp = instance_find(objEnemySpawn, i);
        if (in(esp.x, tx, tx + view_wview)
            &amp;&amp; in(esp.y, ty, ty + view_hview))
        {
            esp.spawn = false;
        }
    }*/
    
    // spawn new blocks (only if blocks empty at that place)
    /*for (var i = 0; i &lt; instance_number(objBlockSpawn) i++) {
        var bsp = instance_find(objBlockSpawn, i);
        if (in(bsp.x, tx0, ty0 + view_wview)
            &amp;&amp; in(bsp.y, tx0, ty0 + view_hview))
        {
            bsp.spawn = false;
        }
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.bg != -1) {
    draw_background_part(sprBackground, global.bg * view_wview, 0, view_wview, view_hview, view_xview, view_yview);
}
if (bgTimer) {
    bgTimer = max(bgTimer - 1, 0);
    draw_background_part_ext(sprBackground, lastBg * view_wview, 0, view_wview, view_hview, view_xview, view_yview, 1, 1, c_white, bgTimer / maxBgTimer);
}

var w_alpha_target = 0;
var w_color_target = $FFFFFF;
switch(global.weather) {
    case 0: // none
    break;
    case 1: // rain
        w_color_target = $81650D;
        w_alpha_target = .5;
        if (!moving) {
            if (w_color == w_color_target)
                instance_create(view_xview + random(view_wview), view_yview, objWeatherRain);
        }
    break;
    case 2: // snow
        w_color_target = $CCCCCC;
        w_alpha_target = .7;
        if (!moving) {
            repeat(2)
                instance_create(view_xview + random(view_wview), view_yview, objWeatherSnow);
        }
    break;
    case 3: // wind
        if(random(100) &lt; 10)
            instance_create(view_xview, view_yview, objWeatherWind);
    break;
}

if (w_color != w_color_target) {
    w_alpha = max(w_alpha - .01, 0);
    if (w_alpha == 0) {
        w_color = w_color_target;
    }
} else {
    if (w_alpha &lt; w_alpha_target) {
        w_alpha = min(w_alpha + .004, w_alpha_target);
    } else if (w_alpha &gt; w_alpha_target) {
        w_alpha = max(w_alpha - .01, 0);
    }
}

// "dim" background
if (w_alpha &gt; 0) {
    draw_set_alpha(w_alpha);
    draw_set_color(w_color);
    draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, 0);
}

// reset
draw_set_color(c_white);
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
