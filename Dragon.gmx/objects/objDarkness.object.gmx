<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>darkness = 0;
minDarkness = 0;
t = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.weather == w.DARKNESS) {

    glow = false;
    for (var i = 0; i &lt; instance_number(objB); i++) {
        if (!hasAbility(a.SUN)) break;
        
        var bb = instance_find(objB, i);
        if (in(bb.x, view_xview, view_xview + view_wview)
        &amp;&amp; in(bb.y, view_yview, view_yview + view_hview)) {
            glow = true;
            break;
        }        
    }

    if (glow) {
        minDarkness = max(minDarkness - 3, 200);
    } else 
        minDarkness = min(minDarkness + 3, 255);
    
    darkness = min(darkness + 3, minDarkness);
    
} else {
    darkness = max(darkness - 3, 0);
    if (darkness == 0)
        instance_destroy();
}
    
x = view_xview;
y = view_yview;

t = (t + .03) % (2*pi);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var surf = surface_create(view_wview, view_hview);
surface_set_target(surf);

var outer = 64;
var middle = 128;
var inner = 255;

draw_set_blend_mode(bm_normal);
draw_set_color(HSV(0, 0, darkness));
draw_rectangle(0, 0, view_wview, view_hview, false);
draw_set_blend_mode(bm_subtract);

draw_set_colour_write_enable(1, 1, 1, 0);

var sin_t = .95 + .1 * sin(t);

// glow
if (hasAbility(a.SUN)) {
    for(var i = 0; i &lt; instance_number(objGlow); i++) {
        var gg = instance_find(objGlow, i);
        var bx = ((gg.x - view_xview) / view_wview) * view_wview - 1;
        var by = ((gg.y - view_yview) / view_hview) * view_hview - 1;
        draw_circle_colour(bx, by, 32 * sin_t, HSV(0, 0, outer * gg.value), HSV(0, 0, outer * gg.value), 0);
        draw_circle_colour(bx, by, 28 * sin_t, HSV(0, 0, middle * gg.value), HSV(0, 0, middle * gg.value), 0);
        draw_circle_colour(bx, by, 16 * sin_t, HSV(0, 0, inner * gg.value), HSV(0, 0, inner * gg.value), 0);
    }
}

// player
var px = ((objPlayer.x - view_xview) / view_wview) * view_wview - 1;
var py = ((objPlayer.y - view_yview) / view_hview) * view_hview - 1;
draw_circle_colour(px, py, 20 * sin_t, HSV(0, 0, outer), HSV(0, 0, outer), 0);
draw_circle_colour(px, py, 14 * sin_t, HSV(0, 0, middle), HSV(0, 0, middle), 0);
draw_circle_colour(px, py, 12 * sin_t, HSV(0, 0, inner), HSV(0, 0, inner), 0);

// save points
for(var i = 0; i &lt; instance_number(objSave); i++) {
    var ss = instance_find(objSave, i);
    var sx = ((ss.x - view_xview) / view_wview) * view_wview - 1;
    var sy = ((ss.y - view_yview) / view_hview) * view_hview - 1 + 4;
    draw_circle_colour(sx, sy, 20 * sin_t, HSV(0, 0, outer), HSV(0, 0, outer), 0);
    draw_circle_colour(sx, sy, 14 * sin_t, HSV(0, 0, middle), HSV(0, 0, middle), 0);
    draw_circle_colour(sx, sy, 12 * sin_t, HSV(0, 0, inner), HSV(0, 0, inner), 0);
}

// sunblocks
for (var i = 0; i &lt; instance_number(objSunBlock); i++) {
    var sb = instance_find(objSunBlock, i);
    
    var bx = ((sb.x - view_xview) / view_wview) * view_wview;
    var by = ((sb.y - view_yview) / view_hview) * view_hview;
    
    draw_background_part(sprTiles, sb.d_x*T, sb.d_y*T, T, T, bx, by);
}

surface_reset_target();

draw_set_colour_write_enable(1, 1, 1, 1);
draw_set_color(c_white);
draw_set_blend_mode(bm_subtract);
draw_surface(surf, 0, 0);

draw_set_blend_mode(bm_normal);
draw_set_color(c_white);

surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
