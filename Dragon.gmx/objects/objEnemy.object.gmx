<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objObstacle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = s.IDLE;
type = 0;

xVel = 0;
yVel = 0;

dir = 0;
initialDir = 0;
movePattern = m.WALK;
angle_offset = 0;

path = path_add();
path_spd = 0;
path_x = 0;
path_y = 0;
path_prev_x = 0;
path_prev_y = 0;

shot_type = 0;
shot_delay = 0;
max_shot_delay = 0;
shoot = 0;

d_sin = 0;
d_t = 0;
d_angle = 0;
t_angle = 0;
d_offx = 0;
d_offy = 0;
d_xscale = 1;
d_yscale = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_delete(path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((!in(y, view_yview, view_yview + view_hview)
    || !in(x, view_xview, view_xview + view_wview))
    &amp;&amp; state == s.TOSS) {
    instance_destroy();
    exit;
}

var dv = min(abs(path_speed) * .3, .5);

// initialization - should only happen once
if (state == s.IDLE) {
    if(path != -1) {
        var startSpd = path_spd;
        if (dir == -1) path_reverse(path);
        
        d_xscale = sign(dir);
        initialDir = dir;
        
        path_action = path_action_restart;
        if (!path_get_closed(path))
            path_action = path_action_reverse;
        path_start(path, startSpd, path_action, 0);

        if (shot_delay &gt; 0) shoot = 1;
        
        state = s.WALK;        
    }
}

// movement
if (state == s.WALK) {

    path_x = path_get_x(path, path_position);
    path_y = path_get_y(path, path_position);

    var path_dir = point_direction(
        path_x,
        path_y,
        path_prev_x,
        path_prev_y);

    if (movePattern == m.WALK)
    {
        var _dir = sign(path_x - path_prev_x);
        if (_dir != 0)
            dir = _dir;
        
        d_sin = sin(d_t);
        d_xscale = min(1, max(d_xscale + sign(dir) * .3, -1));
    
        d_t = (d_t + sign(dir)* dv) % (2*pi);
        d_angle = 360 + 10 * d_sin
        d_offy = -2 * abs(d_sin);

    }
    if (movePattern == m.ROTATEWALK) {
        ang = point_direction(path_prev_x, path_prev_y, path_x, path_y);
        
        d_sin = sin(d_t);
    
        d_t = (d_t + sign(dir)* dv) % (2*pi);
        d_angle = 360 + 10 * d_sin
        d_angle += ang + 180 * (dir == d.LEFT);
        d_xscale = sign(dir);
        d_yscale = sign(dir) + 2*(dir == d.LEFT);

        //d_offy = -2 * abs(d_sin);        
        d_offy = lengthdir_x(-2 * abs(d_sin), d_angle);
        d_offx = lengthdir_y(2 * abs(d_sin), d_angle);
    }
    if (movePattern == m.FLOAT) {
        var _dir = sign(path_x - path_prev_x);
        if (_dir != 0)
            dir = _dir;
    
        d_xscale = min(1, max(d_xscale + sign(dir) * .2, -1));
    }
    if (movePattern == m.ROTATEFLOAT) {
    
        dir = sign(path_speed);
        ang = point_direction(path_prev_x, path_prev_y, path_x, path_y);
        
        t_angle = 360 + (ang + 180 * (dir == d.LEFT) + 180 * (initialDir == d.LEFT)) % 360;        
        if (abs(d_angle - t_angle) &gt;= 180) {
            d_angle -= sign(d_angle - t_angle) * 360;
        }
        d_angle = 360 + (d_angle + (t_angle - d_angle) / 4) % 360;
        
        d_xscale = min(1, max(d_xscale + sign(dir) * sign(initialDir) * .2, -1));
        d_yscale = sign(dir) + 2*(dir == d.LEFT);
        
        d_offy = 0;
        d_offx = 0;
    }
    
    // shooting projectiles
    if (shoot == 1 &amp;&amp; !objCamera.moving) {
        max_shot_delay = max(shot_delay, max_shot_delay);
        shot_delay = max(shot_delay - 1, 0);
        
        if (!shot_delay) {
            shot_delay = max_shot_delay;
            var proj = instance_create(x, y, objEnemyProjectile);
            proj.type = shot_type;
            proj.dir = dir;
        }
    }
    
    // bubble -&gt; trapped in bubble
    var bubble = instance_place(x, y, objBubble);
    if (bubble) {
        path_end();    
        instance_create((x + bubble.x)/2, (y + bubble.y)/2, objBubblePop);
        with(bubble) instance_destroy();
        state = s.BUBBLE;
        d_t = 0;
        d_offx = 0;
        d_offy = 0;
    }

}

if (state == s.BUBBLE) {
    d_t = (d_t + .1) % (2*pi);
    d_sin = sin(d_t);
    d_offy = 2* d_sin;
    
    if (instance_place(x, y, objPlayer)
        &amp;&amp; objPlayer.state != s.DEAD) {
        if (objPlayer.y &gt;= y - 4) {
            if (abs(objPlayer.x - x) &gt; abs(objPlayer.y - y)) {
                xVel = sign(objPlayer.dir) * 3;
            } else {
                yVel = -3;
            }
        } else {
            xVel = sign(objPlayer.dir) * 3;
        }
        state = s.TOSS;
        instance_create(x, y, objBubblePop);
    }
}

if (state == s.TOSS) {
    x += xVel;
    y += yVel;
    
    d_angle = (d_angle + 25) % 360;
    
    var destroy = false;
    for(var i = 0; i &lt; instance_number(objBlock); i++) {
        var block = instance_find(objBlock, i);
        if (place_meeting(x, y, block)) {
            instance_create(block.x + 8, block.y + 8, objEffect);            
            with(block) instance_destroy();
            destroy = true;
        }
    }
    if (destroy &amp;&amp; !place_meeting(x, y, objBlock)) {
        instance_create(x, y, objBubblePop);    
        instance_destroy();
    }
    
    for(var i = 0; i &lt; instance_number(objEnemy); i++) {
        var e = instance_find(objEnemy, i);
        if (collision_circle(x, y, 5, e, 0, 1) &amp;&amp; e.state != s.TOSS) {
            instance_create((x + e.x) / 2, (y + e.y) / 2, objBubblePop);
            e.state = s.TOSS;
            e.xVel = xVel;
            e.yVel = yVel;
            with(e){ path_end(); }
            
            if (self.object_index == objTossBubble)
                instance_destroy();
        }
    }
}

// end

path_prev_x = path_x;
path_prev_y = path_y;
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == s.DEAD) exit;

draw_sprite_ext(sprEnemy, type, x + d_offx, y + d_offy, d_xscale, d_yscale, d_angle + angle_offset, c_white, 1);
if(state == s.BUBBLE) {
    draw_sprite(sprEnemyBubble, -1, x + d_offx, y + d_offy);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
