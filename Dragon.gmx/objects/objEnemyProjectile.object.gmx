<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskEnemyProjectile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objObstacle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = 0;
xVel = 0;
yVel = 0;
yGrav = 0;
type = 0;
state = s.IDLE;

depth = objPlayer.depth - 1;
killOutsideView = true; // for when a certain boss spawns it
init = false;

if (global.weather == w.DARKNESS) {
    var eg = instance_create(x, y, objEnemyGlow);
    eg.parent = id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!init) {
    init = true;
    exit;
}

if (killOutsideView) {
    if (!in(x, view_xview, view_xview + view_wview)
        || !in(y, view_yview - 2*T, view_yview + view_hview)
        || objCamera.moving) {
        instance_destroy();
    }
}

if(state == s.IDLE) {
    // init stuff
    
    state = s.SHOOT;
}

// logic
if (state == s.SHOOT) {

    if(place_meeting(x, y, objLava))
        state = s.DEAD;


    if(random(30) &lt; 8) {
        var part = instance_create(x - 4 + random(8), y - 4 + random(8), objSaveParticle);
        part.yVel = .5;
        part.color = choose(c_black, $4100EA, $7D0071, $5900AD);
    }

    switch(type) {
        // shoot straight ahead
        case 0:
            if (xVel == 0 &amp;&amp; yVel == 0) {
                xVel = sign(dir) * 1.5;
                yVel = 0;
            }
        break;
        // shoot in player direction
        case 1:
            if (xVel == 0 &amp;&amp; yVel == 0) {
                var ang = point_direction(x, y, objPlayer.x, objPlayer.y);
                xVel = lengthdir_x(1.5, ang);
                yVel = lengthdir_y(1.5, ang);
            }
        break;
        case 2: // ballistic
            if (xVel == 0 &amp;&amp; yVel == 0) {
                xVel = sign(dir) * 1.5;
                yVel = -2;
                yGrav = .15;
            }
            
            if (place_meeting(x, y + yVel + 1, objSolid)) {
                yVel *= -.8;
                xVel *= .8;
                
                if (abs(yVel) &lt; .5) state = s.DEAD;
            }
            if (place_meeting(x + xVel + sign(xVel) * 1, y, objSolid)) {
                xVel *= -.8;
            }
        break;
        case 3: // homing shot
            if (xVel == 0 &amp;&amp; yVel == 0) {
                //xVel = sign(dir) * .5;
                spd = 0;
            }

            spd = min(spd + .03, 1);
            
            var ang = point_direction(x, y, objPlayer.x, objPlayer.y);
            
            if (spd == 1) {
                xVel += lengthdir_x(.025, ang);
                yVel += lengthdir_y(.025, ang);
                
                xVel = sign(xVel) * min(abs(xVel), .7);
                yVel = sign(yVel) * min(abs(yVel), .7);
            } else {
                xVel = sign(dir) * .5 * spd;
            }
        break;
    }
    
    yVel += yGrav;
    x += xVel;
    y += yVel;
    if(place_meeting(x, y, objSolid))
        state = s.DEAD;
}

// death
if (state == s.DEAD) {
    //TODO: effect
    instance_create(x, y, objBubblePop);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
