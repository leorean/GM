<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gui_y = 0;
gui_state = 0;
timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_alpha(1);

draw_set_font(global.font);
draw_set_halign(fa_left);
draw_set_valign(fa_top);


timer = max(timer - 1, 0);
if (!global.k_left &amp;&amp; !global.k_right &amp;&amp; !global.k_up &amp;&amp; !global.k_action &amp;&amp; objPlayer.state != s.DEAD) {
} else {
    timer = 40;
}
if (!timer) {
    state = 1;
} else {
    state = 0;
}

if (!state) {
    gui_y = max(gui_y - 1, -32);
} else {
    gui_y = min(gui_y + 1, 0);
}

for(var i = 0; i &lt; WIDTH; i+=T) {
    draw_sprite_part(sprGUI, -1, 0, 0, T, T, i, gui_y);
}

// bubbles
draw_sprite_part(sprGUI, -1, 0, T, T, T, 0, gui_y);
draw_text(T, gui_y + 4, "x" + string(global.bubbles));

draw_set_halign(fa_right);
// scales
draw_sprite_part(sprGUI, -1, 0, 2*T, T, T, WIDTH - T, gui_y);
draw_text(WIDTH - T, gui_y + 4, string(global.scales) + "/" + string(global.maxScales));

// abilities
draw_sprite_part_ext(sprGUI, -1, 0*T, 3*T, T, T, WIDTH/2 - 2*T, gui_y, 1, 1, c_white, .3);
draw_sprite_part_ext(sprGUI, -1, 1*T, 3*T, T, T, WIDTH/2 - 1*T, gui_y, 1, 1, c_white, .3);
draw_sprite_part_ext(sprGUI, -1, 2*T, 3*T, T, T, WIDTH/2 - 0*T, gui_y, 1, 1, c_white, .3);
draw_sprite_part_ext(sprGUI, -1, 3*T, 3*T, T, T, WIDTH/2 + 1*T, gui_y, 1, 1, c_white, .3);

if (hasAbility(a.EARTH))draw_sprite_part(sprGUI, -1, 0*T, 3*T, T, T, WIDTH/2 - 2*T, gui_y);
if (hasAbility(a.THUNDER))draw_sprite_part(sprGUI, -1, 1*T, 3*T, T, T, WIDTH/2 - 1*T, gui_y);
if (hasAbility(a.SUN))draw_sprite_part(sprGUI, -1, 2*T, 3*T, T, T, WIDTH/2 - 0*T, gui_y);
if (hasAbility(a.SKY))draw_sprite_part(sprGUI, -1, 3*T, 3*T, T, T, WIDTH/2 + 1*T, gui_y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
