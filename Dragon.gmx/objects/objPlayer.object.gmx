<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum d {LEFT = -1, RIGHT = 1, UP = -2, DOWN = 2}
enum s {IDLE, WALK, JUMP, JUMP2, SHOOT, POP}

instance_create(x, y, objCamera);

// input vars

k_left = 0;
k_right = 0;
k_up = 0;
k_down = 0;
k_action = 0;

// general vars

bubbleJumps = 0;
bubbles = 2;
state = s.IDLE;
dir = d.RIGHT;
xVel = 0;
yVel = 0;
yGrav = .15;
jumped = false;

// drawing vars

d_angle = 360;
d_xscale = 1;
d_yscale = 1;
d_frame = 0;
d_sin = 0;
d_t = 0;
d_offx = 0;
d_offy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// input

k_left = keyboard_check(vk_left);
k_right = keyboard_check(vk_right);
k_up = keyboard_check(vk_up);
k_down = keyboard_check(vk_down);
k_action = keyboard_check_pressed(ord('S')) || keyboard_check_pressed(vk_down);

// flags

var onGround = collision_line(bbox_left, bbox_bottom + 1, bbox_right, bbox_bottom + 1, objSolid, 0, 1);

var bubble = instance_place(x, y + yVel, objBubble);
var onBubble = yVel &gt; 0 
    &amp;&amp; bubble &amp;&amp; bubble.state == s.IDLE &amp;&amp; bubble.y &gt; y;

// general stuff

if(k_action) {
    if (state == s.WALK || state == s.JUMP || state == s.IDLE) { // || state == s.JUMP2) {
        if (instance_number(objBubble) &gt;= bubbles) {
            var b = instance_find(objBubble, 0);
            if (b) {
                b.state = s.POP;
            }
        }
        var bubble = instance_create(x, y, objBubble);
        bubble.dir = dir;
        bubble.spd = 2.5;
        bubble.decay = 1;// + .4 * abs(xVel);
    
    }
}

if(!onGround) {
    if (state == s.IDLE || state == s.JUMP) {
        jumped = true;
        state = s.JUMP;
    }
}

if(onGround) {
    bubbleJumps = 0;
    if(jumped) {
        d_angle = 360;
        d_yscale = .7;
        jumped = false; 
    }
}

if(k_left) {
    if (xVel &lt; 0)
        dir = d.LEFT;
    xVel = -1;
    if(onGround) {
        state = s.WALK;
    }
}
else if(k_right) {
    if (xVel &gt; 0)
        dir = d.RIGHT;
    xVel = 1;
    if(onGround) {
        state = s.WALK;
    }
} else {
    xVel *= .8;
    if (onGround)
        state = s.IDLE;
}

if(k_up) {
    if(!jumped) {
        state = s.JUMP;
        jumped = true;
        yVel = -2.8;
        d_yscale = .7;
    }
}

// jumping on bubbles

if (onBubble) {
    bubbleJumps++;
    if (bubbleJumps &gt;= bubbles)
        state = s.JUMP2;
    else
        state = s.JUMP;
    jumped = true;
    yVel = -2.8;
    d_yscale = .7;
    
    if (bubble) {
        bubble.state = s.POP;
    }
}

// drawing &lt;-&gt; state

d_xscale = min(1, max(d_xscale + sign(dir) * .2, -1));
d_yscale = min(d_yscale + .2, 1);

if(state == s.IDLE) {
    d_angle = 360;
    d_t = 0;
    d_offx = 0;
    d_offy = 0;
}

if(state == s.WALK) {
    d_t = (d_t + sign(dir)*.3) % (2*pi);
    d_angle = 360 + 10 * d_sin;
    d_offy = -2 * abs(d_sin);
} else {
    d_offy = sign(yVel) * T * (1 - d_yscale);
}

if (state == s.JUMP) {
    var d_tangle = point_direction(x, y, x + xVel, y + yVel + 4) + 90;
    d_angle += (d_tangle - d_angle) / 32;
}

if (state == s.JUMP2) {
    d_xscale = sign(dir);
    d_yscale = 1;
    d_angle = 360 + ((d_angle + -sign(dir) * 15) % 360);
}

d_sin = sin(d_t);

// collision &amp; actual moving

x = max(min(x, room_width), 0);

if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    xVel = 0;
}

yVel += yGrav;
if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    yVel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();

draw_sprite_ext(sprPlayer, d_frame, x + d_offx, y + d_offy, d_xscale, d_yscale, d_angle, c_white, 1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
