<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCameraTarget</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0, 0, objGUI);

// input vars

k_left = 0;
k_right = 0;
k_up = 0;
k_down = 0;
k_action = 0;

// general vars

inWater = false;
wasInWater = false;
death = 0;
onBubble = false;
bubble = noone;
bubbleJumps = 0;
state = s.IDLE;
dir = global.spawn_dir;
xVel = 0;
yVel = 0;
yGrav = .15;
jumped = false;

// drawing vars

d_angle = 360;
d_xscale = sign(dir);
d_yscale = 1;
d_frame = 0;
d_sin = 0;
d_t = 0;
d_offx = 0;
d_offy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// enemies / death

if (state == s.DEAD) {
    if (death &gt; 60) {
        if (choose(0,1)) {
            var _p = instance_create(x - 8 + random(T), y - 8 + random(T), objSaveParticle);
            _p.yVel = -1;
        }
    }
    death = max(death - 1, 0);
    if (!death) {
        load();
        room_restart();
    }
    exit;
}

var die = false;
var enemy = instance_place(x, y, objObstacle);
if (enemy) {
    if ((enemy.object_index == objEnemy 
    &amp;&amp; (enemy.state == s.BUBBLE || enemy.state == s.TOSS || enemy.state == s.DEAD))
    || enemy.object_index == objTossBubble) {
        // nothing
    }
    else {
        die = true;
    }
    
    if (enemy.object_index == objEnemyProjectile &amp;&amp; enemy.state != s.DEAD) {
        enemy.state = s.DEAD;
    }
}

if (collision_rectangle(bbox_left + 2, bbox_top + 2, bbox_right - 2, bbox_bottom - 2, objSwitchBlock, 0, 1))
    die = true;

if (die) {
    instance_create(x, y, objBubblePop);
    death = 90;
    state = s.DEAD;
    d_xscale = 0;
    d_yscale = 0;
    exit;
}

// gravity

yVel += yGrav;

// flags

var canShootBubble = !place_meeting(x, y, objNoBubble);

var platform = instance_place(x, y + yVel + 1, objPlatform);

var onPlatform = collision_rectangle(bbox_left, bbox_bottom + yVel + 1, bbox_right, bbox_bottom + yVel + 1, platform, 0, 1)
    &amp;&amp; yVel &gt;= 0;

var onGround = yVel &gt;= 0 &amp;&amp; collision_line(bbox_left, bbox_bottom + yVel + 1, bbox_right, bbox_bottom + yVel + 1, objSolid, 0, 1);

var onIce = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom + 2, objIceBlock, 0, 1);

inWater = tile_layer_find(LAYER_WATER, x, y + 2);

if (onGround) {
    move_contact_solid(270, 4);
}

if (inWater) {
    if !(wasInWater) {
        yVel = 0;
    }
    state = s.SWIM;
}
else {
    if(state == s.SWIM) state = s.JUMP;
}

if (onPlatform) {
    y = platform.y - 8;
    yVel = min(yVel, 0);
    onGround = true;
}

if (!onBubble) {
    bubble = instance_place(x, y, objBubble);
    if (yVel &gt; 0 &amp;&amp; state != s.JUMP2) {
        onBubble = yVel &gt; 0 &amp;&amp; state != s.JUMP2
            &amp;&amp; instance_exists(bubble) 
            &amp;&amp; place_meeting(x, y, bubble) 
            &amp;&amp; bubble.state == s.IDLE &amp;&amp; bubble.y &gt; y;
    }
    if(hasAbility(a.EARTH)) {
        if (bubble &amp;&amp; bubble.state == s.IDLE
            &amp;&amp; state != s.IDLE) {
            if (yVel &gt;= 0) {
                var tb = instance_create(bubble.x, bubble.y, objTossBubble);
                tb.state = s.TOSS;
                tb.xVel = sign(bubble.x - x + 10*sign(dir)) * 3;
                tb.yVel = 0;
                tb.maxResist = 5;
                tb.resist = 5;
                bubble.state = s.POP;
            }            
        }
    }
}
// general stuff

// SHOOT BUBBLES
if(global.k_action) {
    if (global.bubbles &gt; 0 &amp;&amp; canShootBubble) {
        if (state == s.WALK || state == s.JUMP || state == s.IDLE) {
            if (instance_number(objBubble) &gt;= global.bubbles) {
                var b = instance_find(objBubble, 0);
                if (b) {
                    b.state = s.POP;
                }
            }
            var bb = instance_create(x, y, objBubble);
            bb.dir = dir;
            
            if( state == s.JUMP &amp;&amp; place_meeting(x + sign(dir) * 2, y, objSolid)) {
                bb.state = s.IDLE;
                bb.y = y + 2;
                bb.x -= sign(dir) * 2;
            }
        }
    }
}

if(!onGround) {
    if (state == s.IDLE || state == s.JUMP || state == s.WALK) {
        jumped = true;
        state = s.JUMP;
    }
}

if(onGround) {
    bubbleJumps = 0;
    if(jumped) {
        d_angle = 360;
        if (!inWater)
            d_yscale = .7;
        jumped = false; 
    }
}

if(global.k_left) {
    if (xVel &lt; 0)
        dir = d.LEFT;
    if (!onIce) {
        xVel = -1 + .25 * (global.weather == w.WIND);
    }
    else {
        if (xVel &gt; 0) xVel *= .8;        
        xVel = max(xVel - .03, -1);
    }
    if(onGround) {
        state = s.WALK;
    }
}
else if(global.k_right) {
    if (xVel &gt; 0)
        dir = d.RIGHT;
    if (!onIce) {
        xVel = 1  + .25 * (global.weather == w.WIND);
    } else {
        if (xVel &lt; 0) xVel *= .8;
        xVel = min(xVel + .03, 1);
    }
    if(onGround) {
        state = s.WALK;
    }
} else {
    if (!onIce) {
        xVel *= .8;
    } else {
        xVel *= .95;
    }
    if (onGround)
        state = s.IDLE;

    if (state == s.IDLE || state == s.JUMP || state == s.JUMP2) {
        if (global.weather == w.WIND &amp;&amp; xVel &lt;= .2 &amp;&amp; x &lt; view_xview + view_wview - 8) {
            xVel += .03;
        }        
    }
}

if(global.k_up) {
    if(!jumped) {
        state = s.JUMP;
        jumped = true;
        yVel = -2.8;
        d_angle = 360 + 20*sign(dir);
    }
    if (inWater) {
        bubbleJumps = 0;
        state = s.JUMP;
        jumped = true;
        yVel = -1.5;
    }    
}

// splash effect (water)
if (wasInWater &amp;&amp; !inWater) {
    var eff = instance_create(x, y, objEffect);
    eff.type = 1;
    yVel -= 1;
}
if (!wasInWater &amp;&amp; inWater) {
    var eff = instance_create(x, y, objEffect);
    eff.type = 1;
}

// jumping on bubbles

if (onBubble) {
    onBubble = false;
    bubbleJumps++;
    if (bubbleJumps &gt;= global.bubbles) {
        state = s.JUMP2;
        with (objBubble) state = s.POP;
    }
    else
        state = s.JUMP;
    jumped = true;
    yVel = -2.8;
    d_yscale = .7;
    
    if (instance_exists(bubble)) {
        bubble.state = s.POP;
    }
}

// drawing &lt;-&gt; state

d_xscale = min(1, max(d_xscale + sign(dir) * .2, -1));
d_yscale = min(d_yscale + .04, 1);

if(state == s.IDLE) {
    d_angle = 360;
    d_t = 0;
    d_offx = 0;
    d_offy = 0;
}

if(state == s.WALK) {
    d_t = (d_t + sign(dir)*.3) % (2*pi);
    d_angle = 360 + 10 * d_sin;
    d_offy = -2 * abs(d_sin);
} else {
    d_offy = sign(yVel) * T * (1 - d_yscale) - 1 * (!onPlatform);
}

if (state == s.SWIM) {
    d_angle = 360 + (point_direction(x, y, x + sign(xVel) * max(abs(xVel), .5), y + yVel) - 90) % 360;
}

if (state == s.JUMP) {
    var d_tangle = point_direction(x, y, x + xVel, y + yVel + 3) + 90;
    d_angle += (d_tangle - d_angle) / 32;
}

if (state == s.JUMP2) {
    d_xscale = sign(dir);
    d_yscale = 1;
    d_angle = 360 + ((d_angle + -sign(dir) * 15) % 360);
}

d_sin = sin(d_t);

// collision &amp; actual moving

xVel = sign(xVel) * min(abs(xVel), 3);
yVel = sign(yVel) * min(abs(yVel), 3);

// in water

if (inWater) {
    if (yVel &gt; 0)
        yVel -= yVel *.25;
    xVel = sign(xVel) * min(abs(xVel), 0.75);
    yVel = sign(yVel) * min(abs(yVel), 2);
}

x = max(min(x, room_width), 0);

if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    xVel = 0;
}

if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    yVel = 0;
}

// end

wasInWater = inWater;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprPlayer, d_frame, abs(x + d_offx), abs(y + d_offy), d_xscale, d_yscale, d_angle, c_white, 1);

/*
if (hasAbility(a.THUNDER)) {
    prev = noone;
    cur = noone;
    for (var i = 0; i &lt;= instance_number(objBubble) &amp;&amp; instance_number(objBubble) &gt; 1; i++) {
    
        prev = noone;
        if (instance_exists(cur) &amp;&amp; cur.state == s.IDLE) {
            prev = cur;
        }
    
        cur = noone;
        var _i = i;
        if (i &gt;= instance_number(objBubble)) {
            _i = 0;
            if (instance_number(objBubble) &lt;= 2) break;
        }
        var _c = instance_find(objBubble, _i);
        if (_c.state == s.IDLE) {
            cur = _c;
        }
        
        if (prev &amp;&amp; cur) {
            drawLightning(prev.x, prev.y, cur.x, cur.y);            
        }
    }
}
draw_set_color(c_white);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
