<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCameraTarget</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0, 0, objGUI);

// general vars

destroyUpTimer = 0;
maxDestroyUpTimer = 20;
bubbleActionTimer = 0;
shot = false;
shotTimer = 20;

tossMe = noone;
tossID = noone;

die = false;
inWater = false;
wasInWater = false;
death = 0;
onBubble = false;
bubble = noone;
bubbleJumps = 0;
state = s.IDLE;
dir = global.spawn_dir;
xVel = 0;
yVel = 0;
yGrav = .15;
jumped = false;

// drawing vars

wPower = 0; // teleport glow

d_angle = 360;
d_xscale = sign(dir);
d_yscale = 1;
d_frame = 0;
d_sin = 0;
d_t = 0;
d_offx = 0;
d_offy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// enemies / death

if (state == s.DEAD) {
    if (death &gt; 60) {
        if (choose(0,1)) {
            var _p = instance_create(x - 8 + random(T), y - 8 + random(T), objSaveParticle);
            _p.yVel = -1;
        }
    }
    death = max(death - 1, 0);
    if (!death) {
        load();
        room_restart();
    }
    exit;
}

var enemy = instance_place(x, y, objObstacle);
if (enemy) {
    if ((enemy.object_index == objEnemy 
    &amp;&amp; (enemy.state == s.BUBBLE || enemy.state == s.TOSS || enemy.state == s.DEAD))
    || enemy.object_index == objTossBubble) {
        // nothing
    }
    else {
        die = true;
    }
    
    if (enemy.object_index == objEnemyProjectile &amp;&amp; enemy.state != s.DEAD) {
        enemy.state = s.DEAD;
    }
}

if (collision_rectangle(bbox_left + 2, bbox_top + 2, bbox_right - 2, bbox_bottom - 2, objSwitchBlock, 0, 1))
    die = true;

if (die) {
    instance_create(x, y, objBubblePop);
    death = 90;
    state = s.DEAD;
    d_xscale = 0;
    d_yscale = 0;
    die = false;
    exit;
}

// gravity

var inSpace = (global.bg == 10);

if (!inSpace) {
    jumpVel = -2.8;
    yGrav = .15;
}
else {
    jumpVel = -2;
    yGrav = .05;
}

yVel += yGrav;

// flags

var canShootBubble = !place_meeting(x, y, objNoBubble);

var platform = instance_place(x, y + yVel + 1, objPlatform);

var onPlatform = collision_rectangle(bbox_left, bbox_bottom + yVel + 1, bbox_right, bbox_bottom + yVel + 1, platform, 0, 1)
    &amp;&amp; yVel &gt;= 0;

var onGround = yVel &gt;= 0 &amp;&amp; collision_line(bbox_left, bbox_bottom + yVel + 1, bbox_right, bbox_bottom + yVel + 1, objSolid, 0, 1);

var onIce = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom + 2, objIceBlock, 0, 1);

inWater = tile_layer_find(LAYER_WATER, x, y + 2);

var current = collision_circle(x, y, 1, objCurrent, 0, 1);

if (onGround) {
    move_contact_solid(270, 4);
}

if (inWater) {
    if !(wasInWater) {
        yVel = 0;
    }
    state = s.SWIM;
}
else {
    if(state == s.SWIM) {
        state = s.JUMP;
        yVel = -1;
    }
}

if (onPlatform) {
    y = platform.y - 8;
    yVel = min(yVel, 0);
    onGround = true;
}

if (!onBubble) {
    bubble = instance_place(x, y, objBubble);
    if (yVel &gt; 0 &amp;&amp; state != s.JUMP2) {
        onBubble = yVel &gt; 0 &amp;&amp; state != s.JUMP2
            &amp;&amp; instance_exists(bubble) 
            &amp;&amp; place_meeting(x, y, bubble) 
            &amp;&amp; bubble.state == s.IDLE &amp;&amp; bubble.y &gt; y;
    }
}

tossMe = instance_place(x, y, objTossMe);
if (tossMe) {
    if (state != s.TOSS) {
        xVel = 0;
        yVel = 0;
        x += (tossMe.x - x) / 4;
        y += (tossMe.y - y) / 4;
        d_angle = tossMe.angle - 90;
        
        if (state != s.TOSS_WAIT)
            tossMe.scale = .65;
        
        state = s.TOSS_WAIT;
        tossID = tossMe;
    }
}

// general stuff

// SHOOT BUBBLES
if(global.k_action) {
    if (hasAbility(a.EARTH))
        bubbleActionTimer++;
    if (!shot) {
        shot = true;
        if (global.bubbles &gt; 0 &amp;&amp; canShootBubble) {
            if (state == s.WALK || state == s.JUMP || state == s.IDLE) {
                if (instance_number(objBubble) &gt;= global.bubbles) {
                    var b = instance_find(objBubble, 0);
                    if (b) {
                        b.state = s.POP;
                    }
                }
                var bb = instance_create(x - sign(dir)*1 - 1, y, objBubble);
                bb.dir = dir;
                
                if( state == s.JUMP &amp;&amp; place_meeting(x + sign(dir) * 2, y, objSolid)) {
                    bb.state = s.IDLE;
                    bb.y = y + 2;
                    bb.x -= sign(dir) * 2;
                }
            }
        }
    }
}
if (!instance_exists(objBubble))
    bubbleActionTimer = 0;

// upwind &amp;&amp; destroying blocks with head

var upWind = instance_place(x, y, objUpWind);
if(place_meeting(x, y - 4, objSolid)) upWind = noone;
if (upWind) {
    yVel = min(yVel - 1.1 * yGrav, .5);
    
    if(yVel &lt;= -3) {
        destroyUpTimer = min(destroyUpTimer + 6, maxDestroyUpTimer);
    }
}

destroyUpTimer = max(destroyUpTimer - 1, 0);
if (destroyUpTimer &gt; 0) {
    instance_deactivate_object(objBlock);
    instance_activate_region(x - T, y - T, 2*T, 2*T, 1);
    for(var i = 0; i &lt; instance_number(objBlock); i++) {
        var upBlock = instance_find(objBlock, i);
        if (place_meeting(x, y + yVel - 1, upBlock)) {
            with(upBlock) {
                instance_create(x + 8, y + 8, objEffect);
                instance_destroy();
            }
        }
    }
    instance_activate_object(objBlock);
}

if (global.k_action_released) {

    if (hasAbility(a.EARTH)) {
        if (bubbleActionTimer &gt;= shotTimer) {
            for(var i = 0; i &lt; instance_number(objBubble); i++) {
                var bubble = instance_find(objBubble, i);
                if (bubble.state == s.IDLE) {
                    bubble.state = s.POP;
                    var tb = instance_create(bubble.x, bubble.y, objTossBubble);      
                    tb.dir = dir;
                }
            }
        }
    }

    shot = false;
    bubbleActionTimer = 0;
}

if(!onGround) {
    if (state == s.IDLE || state == s.JUMP || state == s.WALK) {
        jumped = true;
        state = s.JUMP;
    }
}

if(onGround) {
    bubbleJumps = 0;
    if(jumped) {
        d_angle = 360;
        if (!inWater)
            d_yscale = .7;
        jumped = false; 
    }
}

if (state != s.TOSS_WAIT &amp;&amp; state != s.TOSS) {
    if(global.k_left) {
        if (xVel &lt; 0)
            dir = d.LEFT;
        if (!onIce) {
            xVel = -1 + .25 * (global.weather == w.WIND);
        }
        else {
            if (xVel &gt; 0) xVel *= .8;        
            xVel = max(xVel - .03, -1);
        }
        if(onGround) {
            state = s.WALK;
        }
    }
    else if(global.k_right) {
        if (xVel &gt; 0)
            dir = d.RIGHT;
        if (!onIce) {
            xVel = 1  + .25 * (global.weather == w.WIND);
        } else {
            if (xVel &lt; 0) xVel *= .8;
            xVel = min(xVel + .03, 1);
        }
        if(onGround) {
            state = s.WALK;
        }
    } else {
        if (!onIce) {
            xVel *= .8;
        } else {
            xVel *= .95;
        }
        if (onGround)
            state = s.IDLE;
    
        if (state == s.IDLE || state == s.JUMP || state == s.JUMP2) {
            if (global.weather == w.WIND &amp;&amp; xVel &lt;= .2 &amp;&amp; x &lt; view_xview + view_wview - 8) {
                xVel += .03;
            }        
        }
    }
    
    if (global.k_up) {
        if (inWater) {
            bubbleJumps = 0;
            state = s.SWIM;
            jumped = true;
            yVel = max(yVel - .25, -.8);
        }
    
        
        if (upWind) {
            bubbleJumps = 0;
            yVel = min(yVel - .3, -4);
        }
    
    }
    if(global.k_up_pressed) {
        if(!jumped) {
            state = s.JUMP;
            jumped = true;
            yVel = jumpVel;
            d_angle = 360 + 20*sign(dir);
        }
    }
}

// tossing player (waiting state + input)
if (state == s.TOSS_WAIT) {
    if (instance_exists(tossMe)) {
        xVel = 0;
        yVel = 0;
        yGrav = 0;
        if ((!tossMe.auto &amp;&amp; (global.k_up_pressed || global.k_action_pressed))
            || tossMe.auto &amp;&amp; !tossMe.autoTimer) {
            instance_create(x, y, objEffect);
            toss_xo = x;
            toss_yo = y;
            toss_angle = tossMe.t_angle;
            //toss_angle = tossMe.angle;
            tossMe.scale = 1.35;
            tossMe.angleTimeout = 60;
            tossMe.angle = toss_angle;
            state = s.TOSS;
        }
    }
}

// getting tossed
if (state == s.TOSS) {
    
    //if (abs(toss_xo - x) &lt; 10*T &amp;&amp; abs(toss_yo - y) &lt; 10*T) {
        yGrav = 0;
        xVel = lengthdir_x(5, toss_angle);
        yVel = lengthdir_y(5, toss_angle);
    //}

    var nextToss = instance_place(x + xVel, y + yVel, objTossMe);
    if (nextToss &amp;&amp; nextToss != tossID)
        state = s.IDLE;
    
    var block = instance_place(x + xVel, y + yVel, objSolid);
    if (block) {
        if (block.object_index == objBlock) {
            with(block) {
                instance_create(x + 8, y + 8, objEffect);
                instance_destroy();
            }
        } else {
            state = s.IDLE;
        }
    }
}


// splash effect (water)
if (wasInWater &amp;&amp; !inWater) {
    var eff = instance_create(x, y, objEffect);
    eff.type = 1;
    yVel -= 1;
}
if (!wasInWater &amp;&amp; inWater) {
    var eff = instance_create(x, y, objEffect);
    eff.type = 1;
}

// destroying bubbles when getting tossed through
if (state == s.TOSS) {
    onBubble = false;
    if (instance_exists(bubble)) {
        bubble.state = s.POP;
    }
}

// jumping on bubbles
if (onBubble) {
    onBubble = false;
    bubbleJumps++;
    if (bubbleJumps &gt;= global.bubbles) {
        state = s.JUMP2;
        with (objBubble) state = s.POP;
    }
    else
        state = s.JUMP;
    jumped = true;
    yVel = jumpVel;
    d_yscale = .7;
    
    if (instance_exists(bubble)) {
        bubble.state = s.POP;
    }
}

if (current) 
    state = s.JUMP2;

// drawing &lt;-&gt; state

d_xscale = min(1, max(d_xscale + sign(dir) * .2, -1));
d_yscale = min(d_yscale + .04, 1);

if(state == s.IDLE) {
    d_angle = 360;
    d_t = 0;
    d_offx = 0;
    d_offy = 0;
}

if(state == s.WALK) {
    d_t = (d_t + sign(dir)*.3) % (2*pi);
    d_angle = 360 + 10 * d_sin;
    d_offy = -2 * abs(d_sin);
} else {
    d_offy = sign(yVel) * T * (1 - d_yscale) - 1 * (!onPlatform);
}

if (state == s.SWIM) {
    d_angle = 360 + (point_direction(x, y, x + xVel, y + yVel) - 90) % 360;
}

if (state == s.JUMP) {
    var d_tangle = point_direction(x, y, x + xVel, y + yVel + 3) + 90;
    d_angle += (d_tangle - d_angle) / 32;
}

if (state == s.JUMP2) {
    d_xscale = sign(dir);
    d_yscale = 1;
    d_angle = 360 + ((d_angle -sign(dir) * 15) % 360);
}

if (state == s.TOSS) {
    d_angle = 360 + ((d_angle -sign(dir) * 30) % 360);
}

d_sin = sin(d_t);

// collision &amp; actual moving

if (state != s.TOSS) {
    xVel = sign(xVel) * min(abs(xVel), 3);
    yVel = sign(yVel) * min(abs(yVel), 3);
}

// in water

if (inWater) {
    if (yVel &gt; 0)
        yVel -= yVel *.25;
    xVel = sign(xVel) * min(abs(xVel), 0.75);
    yVel = sign(yVel) * min(abs(yVel), 2);
}

// current (overwrites every movement)

if (current) {
    switch(current.dir) {
        case d.UP:
        case d.DOWN:
            xVel = (current.x - x + 8) / 4;
            yVel = sign(current.dir) * min(abs(yVel) + .5, 4);
        break;
        case d.LEFT:
        case d.RIGHT:
            dir = current.dir;
            xVel = sign(current.dir) * min(abs(xVel) + .5, 4);
            yVel = (current.y - y + 8);
        break;
        
        d_angle += 30;
        d_angle = 360 + d_angle % 360;
    }
}

// actual collision/movement &amp; restrictions

x = max(min(x, room_width - 8), 8);
y = max(min(y, room_height + 8), 8);
if (y &gt; room_height) die = true;

if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    xVel = 0;
}

if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    yVel = 0;
}

// end

wasInWater = inWater;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var color = c_white;

if (bubbleActionTimer &gt; shotTimer) {
    color = make_color_hsv(0, 255, 255);
    
        for (var i = 0; i &lt; instance_number(objBubble); i++) {
            var bb = instance_find(objBubble, i);
                if (random(20) &lt; 2) {
                    var part = instance_create(bb.x - 8 + random(T),bb.y - 8 + random(T), objSaveParticle);
        }
    }
}

if(destroyUpTimer &gt; 0)
    d_angle = 360 + point_direction(x, y, x + xVel, y - 4) - 90;

draw_sprite_ext(sprPlayer, d_frame, abs(x + d_offx), abs(y
 + d_offy), d_xscale, d_yscale, d_angle, color, 1);

/*if (instance_exists(tossMe)) {
    draw_sprite_ext(sprTossMe, 1, tossMe.x, tossMe.y, tossMe.scale,tossMe.scale, tossMe.angle, c_white, 1);
}*/
 
if (wPower &gt; 0) {
    draw_sprite_ext(sprPlayer, 1, abs(x + d_offx), abs(y + d_offy), d_xscale, d_yscale, d_angle, c_white, wPower / 100);
}
 
if(destroyUpTimer &gt; 0)
{
    draw_sprite_ext(sprDestroyUp, -1, x, y, d_xscale, 1, d_angle, c_white, 
        min(destroyUpTimer/maxDestroyUpTimer, .6));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
