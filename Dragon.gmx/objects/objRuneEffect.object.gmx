<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = choose(1, 2);
alpha = 1;
color = c_white;
xVel = 0;
yVel = 0;
target = noone;
acc = 150;
maxDist = T;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x += xVel;
y += yVel;

if (target != noone &amp;&amp; instance_exists(target)) {
    depth = target.depth - 1;
    xVel += (target.x - x) / acc;
    yVel += (target.y - y) / acc;
    z = 3 - 3 * (min(point_distance(x, y, target.x, target.y), maxDist) / maxDist);
}

alpha = max(alpha - .01, 0);
if (!alpha) instance_destroy();

var color = c_white;
var h1 = 255; var s1 = 255; var v1 = 255;
var h2 = 255; var s2 = 255; var v2 = 255;

switch(type) {
    case 0: // earth
        h1 = 15; h2 = 35;
        s1 = 255; s2 = 255;
    break;
    case 1: // thunder
        h1 = 135; h2 = 120;
        s1 = 0; s2 = 255;
    break;
    case 2: // sun
        h1 = 40; h2 = 40;
        s1 = 255; s2 = 0;
    break;
    case 3: // sky
        h1 = 50; h2 = 85;
        s1 = 255; s2 = 0;
    break;
}

var hue = abs((h2 - h1) * (z / 3) + h1);
var sat = abs((s2 - s1) * (z / 3) + s1);
var val = 255;//(v2 - v1) * (z / 3) + v1;

color = make_color_hsv(hue, sat, val);

draw_sprite_ext(mskPixel, -1, x - z*.5, y - z*.5, z, z, 0, color, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
