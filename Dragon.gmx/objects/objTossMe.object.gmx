<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTossMe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAny</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angle = 0;
angleSpeed = 0;
angleTimeout = 0;
maxAngleTimeout = 0;


minAngle = 0;
maxAngle = 360;
ignoreMinMaxAngle = true;

auto = false;
autoTimer = 0;

sinXvel = 0;
sinYvel = 0;
tx = 0;
ty = 0;
circle = 0;

depth = objPlayer.depth - 1;

t_angle = 0;

scale = 1;

ds_skip = ds_list_create();

t_sin1 = 0;
t_sin2 = 0;

sin_1 = 0;
sin_2 = 0;
sin_3 = 0;
sin_4 = 0;
sin_5 = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(ds_skip);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ignoreMinMaxAngle = (minAngle == maxAngle);
angleTimeout = max(angleTimeout - 1, 0);

if (angleTimeout == 0) {

    angleTimeout = maxAngleTimeout;

    if (!ignoreMinMaxAngle) {
        if (t_angle + angleSpeed &lt; minAngle || t_angle + angleSpeed &gt; maxAngle) {
            angleSpeed *= -1;
            angleTimeout = max(angleTimeout, 30);
            t_angle = min(max(t_angle, minAngle), maxAngle);
        } else {
            t_angle = (t_angle + angleSpeed);
        }        
    } else {
        t_angle = (t_angle + angleSpeed);
    }    
}

if (ignoreMinMaxAngle) t_angle = t_angle % 360;

if (abs(angle - t_angle) &gt;= 180) {
    angle -= sign(angle - t_angle) * 360;
}

angle += ((t_angle - angle) / 10);

if (scale &lt; 1)
    scale = min(scale + .02, 1);
if (scale &gt; 1)
    scale = max(scale - .04, 1);

tx = (tx + sinXvel) % (2 * pi);
ty = (ty + sinYvel) % (2 * pi);

var vx, vy;

vx = 1 * sin(tx);
if (circle)
    vy = 1 * cos(ty);
else
    vy = 1 * sin(ty);

x += vx;
y += vy;

// correct player so he doesnt get "dragged"
if (place_meeting(x, y, objPlayer)) {
    if (objPlayer.state != s.TOSS) {
        objPlayer.x += vx;
        objPlayer.y += vy;
    }
    autoTimer = max(autoTimer - 1, 0);
} else {
    autoTimer = 30;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (!place_meeting(x, y, objPlayer)) {
    t_sin1 = (t_sin1 + .06) % (2*pi);
    t_sin2 = (t_sin2 + .09) % (2*pi);
    
    sin_2 = - 6 + sin(t_sin1) * 2;
    sin_1 = - 3 + sin(t_sin1) * 1;
    sin_3 = sin(t_sin2);
    
    sin_4 = sin_1;
    sin_5 = sin_2;
    
} else {
    t_sin1 = (t_sin1 + .1) % (2*pi);

    sin_2 = max(sin_2 - .6, - 12);
    sin_1 = max(sin_1 - .4, - 8);
    sin_3 = 0;
    
    sin_4 = sin_1 + 2*(sin(t_sin1));
    sin_5 = sin_2 + 3*(sin(t_sin1));
}

draw_sprite_ext(sprTossMe, 2, x + lengthdir_x(sin_5, angle), y + lengthdir_y(sin_5, angle), scale, scale, angle + 2 * sin_3, c_white, 1);
draw_sprite_ext(sprTossMe, 1, x + lengthdir_x(sin_4, angle), y + lengthdir_y(sin_4, angle), scale, scale, angle - 3 * sin_3, c_white, 1);
draw_sprite_ext(sprTossMe, 0, x, y, scale, scale, angle, c_white, 1);

/*draw_text(x, y - T, t_angle);
draw_text(x, y - 2*T, angle);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
